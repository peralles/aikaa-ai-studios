openapi: 3.0.3
info:
  title: Studios AI Backend Platform API
  description: Backend API for Studios AI platform enabling businesses to create and manage AI-powered automation studios
  version: 1.0.0
  contact:
    name: Studios AI Team
    email: api@studiosai.com
  license:
    name: MIT
    url: https://opensource.org/licenses/MIT

servers:
  - url: https://api.studiosai.com/v1
    description: Production server
  - url: https://staging-api.studiosai.com/v1
    description: Staging server
  - url: http://localhost:3000/v1
    description: Development server

security:
  - BearerAuth: []

components:
  securitySchemes:
    BearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT

  schemas:
    Company:
      type: object
      required:
        - id
        - name
        - industry_type
        - contact_email
        - headquarters_address
      properties:
        id:
          type: string
          format: uuid
          description: Unique company identifier
        name:
          type: string
          minLength: 3
          maxLength: 100
          description: Company name
        industry_type:
          type: string
          enum:
            [
              technology,
              healthcare,
              finance,
              retail,
              manufacturing,
              education,
              consulting,
              other,
            ]
          description: Industry classification
        contact_email:
          type: string
          format: email
          description: Primary contact email
        contact_phone:
          type: string
          pattern: '^[\+]?[1-9][\d]{0,15}$'
          description: Optional contact phone number
        headquarters_address:
          type: string
          minLength: 10
          maxLength: 500
          description: Physical headquarters address
        created_at:
          type: string
          format: date-time
          readOnly: true
        updated_at:
          type: string
          format: date-time
          readOnly: true

    CreateCompanyRequest:
      type: object
      required:
        - name
        - industry_type
        - contact_email
        - headquarters_address
      properties:
        name:
          type: string
          minLength: 3
          maxLength: 100
        industry_type:
          type: string
          enum:
            [
              technology,
              healthcare,
              finance,
              retail,
              manufacturing,
              education,
              consulting,
              other,
            ]
        contact_email:
          type: string
          format: email
        contact_phone:
          type: string
          pattern: '^[\+]?[1-9][\d]{0,15}$'
        headquarters_address:
          type: string
          minLength: 10
          maxLength: 500

    Studio:
      type: object
      required:
        - id
        - company_id
        - name
        - business_area
        - created_by
      properties:
        id:
          type: string
          format: uuid
        company_id:
          type: string
          format: uuid
        name:
          type: string
          minLength: 3
          maxLength: 100
        description:
          type: string
          maxLength: 1000
        business_area:
          type: string
          enum:
            [marketing, sales, operations, customer_support, finance, hr, other]
        created_by:
          type: string
          format: uuid
        created_at:
          type: string
          format: date-time
          readOnly: true
        updated_at:
          type: string
          format: date-time
          readOnly: true

    CreateStudioRequest:
      type: object
      required:
        - name
        - business_area
      properties:
        name:
          type: string
          minLength: 3
          maxLength: 100
        description:
          type: string
          maxLength: 1000
        business_area:
          type: string
          enum:
            [marketing, sales, operations, customer_support, finance, hr, other]

    WorkflowTemplate:
      type: object
      required:
        - id
        - name
        - description
        - business_area
        - activepieces_flow_id
        - input_schema
        - estimated_duration_minutes
        - complexity_level
        - version
      properties:
        id:
          type: string
          format: uuid
        name:
          type: string
          minLength: 3
          maxLength: 200
        description:
          type: string
          minLength: 10
          maxLength: 1000
        business_area:
          type: string
          enum:
            [marketing, sales, operations, customer_support, finance, hr, other]
        activepieces_flow_id:
          type: string
          format: uuid
        input_schema:
          type: object
          description: JSON schema defining required input fields
        output_schema:
          type: object
          description: JSON schema defining expected output structure
        estimated_duration_minutes:
          type: integer
          minimum: 1
          maximum: 1440
        complexity_level:
          type: string
          enum: [beginner, intermediate, advanced]
        tags:
          type: array
          items:
            type: string
          maxItems: 10
        version:
          type: string
          pattern: '^(0|[1-9]\d*)\.(0|[1-9]\d*)\.(0|[1-9]\d*)$'
        is_active:
          type: boolean
        created_at:
          type: string
          format: date-time
          readOnly: true
        updated_at:
          type: string
          format: date-time
          readOnly: true

    WorkflowExecution:
      type: object
      required:
        - id
        - studio_id
        - template_id
        - user_id
        - input_data
        - status
      properties:
        id:
          type: string
          format: uuid
        studio_id:
          type: string
          format: uuid
        template_id:
          type: string
          format: uuid
        user_id:
          type: string
          format: uuid
        input_data:
          type: object
          description: User-provided input data conforming to template schema
        output_data:
          type: object
          description: Workflow execution results
        status:
          type: string
          enum: [pending, running, succeeded, failed, paused]
        activepieces_run_id:
          type: string
          format: uuid
          description: ActivePieces execution identifier
        started_at:
          type: string
          format: date-time
        completed_at:
          type: string
          format: date-time
        duration_seconds:
          type: integer
          minimum: 0
        error_message:
          type: string
          maxLength: 2000
        retry_count:
          type: integer
          minimum: 0
          maximum: 3
        logs:
          type: array
          items:
            type: object
          description: Execution logs array
        created_at:
          type: string
          format: date-time
          readOnly: true

    ExecuteWorkflowRequest:
      type: object
      required:
        - template_id
        - input_data
      properties:
        template_id:
          type: string
          format: uuid
        input_data:
          type: object
          description: Input data conforming to workflow template schema

    File:
      type: object
      required:
        - id
        - studio_id
        - uploaded_by
        - filename
        - file_size
        - mime_type
      properties:
        id:
          type: string
          format: uuid
        studio_id:
          type: string
          format: uuid
        uploaded_by:
          type: string
          format: uuid
        filename:
          type: string
          minLength: 1
          maxLength: 255
        file_size:
          type: integer
          minimum: 1
          maximum: 104857600 # 100MB limit
        mime_type:
          type: string
          enum:
            [
              "image/jpeg",
              "image/png",
              "image/gif",
              "image/webp",
              "application/pdf",
              "text/plain",
              "text/csv",
              "application/vnd.ms-excel",
              "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet",
              "application/msword",
              "application/vnd.openxmlformats-officedocument.wordprocessingml.document",
              "application/json",
              "application/zip",
            ]
        supabase_path:
          type: string
          readOnly: true
        upload_timestamp:
          type: string
          format: date-time
          readOnly: true
        last_accessed:
          type: string
          format: date-time
          readOnly: true
        access_level:
          type: string
          enum: [private, studio, company]
        metadata:
          type: object

    KanbanBoard:
      type: object
      required:
        - id
        - studio_id
        - name
        - created_by
      properties:
        id:
          type: string
          format: uuid
        studio_id:
          type: string
          format: uuid
        name:
          type: string
          minLength: 3
          maxLength: 100
        description:
          type: string
          maxLength: 1000
        created_by:
          type: string
          format: uuid
        created_at:
          type: string
          format: date-time
          readOnly: true
        updated_at:
          type: string
          format: date-time
          readOnly: true

    CreateKanbanBoardRequest:
      type: object
      required:
        - name
      properties:
        name:
          type: string
          minLength: 3
          maxLength: 100
        description:
          type: string
          maxLength: 1000

    KanbanStage:
      type: object
      required:
        - id
        - board_id
        - name
        - color
        - position
      properties:
        id:
          type: string
          format: uuid
        board_id:
          type: string
          format: uuid
        name:
          type: string
          minLength: 2
          maxLength: 50
        color:
          type: string
          pattern: "^#[0-9A-Fa-f]{6}$"
          description: Hex color code
        position:
          type: integer
          minimum: 0
        workflow_triggers:
          type: array
          items:
            $ref: "#/components/schemas/WorkflowTriggerConfig"
        created_at:
          type: string
          format: date-time
          readOnly: true
        updated_at:
          type: string
          format: date-time
          readOnly: true

    CreateKanbanStageRequest:
      type: object
      required:
        - name
        - color
      properties:
        name:
          type: string
          minLength: 2
          maxLength: 50
        color:
          type: string
          pattern: "^#[0-9A-Fa-f]{6}$"
        workflow_triggers:
          type: array
          items:
            $ref: "#/components/schemas/WorkflowTriggerConfig"

    WorkflowTriggerConfig:
      type: object
      required:
        - template_id
        - conditions
        - is_active
      properties:
        template_id:
          type: string
          format: uuid
        conditions:
          type: array
          items:
            $ref: "#/components/schemas/TriggerCondition"
        is_active:
          type: boolean

    TriggerCondition:
      type: object
      required:
        - type
      properties:
        type:
          type: string
          enum: [stage_entry, stage_exit, attribute_change]
        field_name:
          type: string
          description: Required for attribute_change type
        field_value:
          description: Expected value for trigger
        operator:
          type: string
          enum: ["=", "!=", ">", "<", "contains"]

    KanbanCard:
      type: object
      required:
        - id
        - board_id
        - stage_id
        - title
        - position
        - created_by
      properties:
        id:
          type: string
          format: uuid
        board_id:
          type: string
          format: uuid
        stage_id:
          type: string
          format: uuid
        title:
          type: string
          minLength: 1
          maxLength: 200
        description:
          type: string
          maxLength: 2000
        position:
          type: integer
          minimum: 0
        assignee_id:
          type: string
          format: uuid
        due_date:
          type: string
          format: date-time
        custom_fields:
          type: array
          items:
            $ref: "#/components/schemas/CardCustomField"
        created_by:
          type: string
          format: uuid
        created_at:
          type: string
          format: date-time
          readOnly: true
        updated_at:
          type: string
          format: date-time
          readOnly: true

    CreateKanbanCardRequest:
      type: object
      required:
        - title
        - stage_id
      properties:
        title:
          type: string
          minLength: 1
          maxLength: 200
        description:
          type: string
          maxLength: 2000
        stage_id:
          type: string
          format: uuid
        assignee_id:
          type: string
          format: uuid
        due_date:
          type: string
          format: date-time
        custom_fields:
          type: array
          items:
            $ref: "#/components/schemas/CardCustomField"

    UpdateKanbanCardRequest:
      type: object
      properties:
        title:
          type: string
          minLength: 1
          maxLength: 200
        description:
          type: string
          maxLength: 2000
        stage_id:
          type: string
          format: uuid
        assignee_id:
          type: string
          format: uuid
        due_date:
          type: string
          format: date-time
        custom_fields:
          type: array
          items:
            $ref: "#/components/schemas/CardCustomField"

    CardCustomField:
      type: object
      required:
        - field_name
        - field_type
        - field_value
      properties:
        field_name:
          type: string
          minLength: 1
          maxLength: 50
        field_type:
          type: string
          enum: [text, number, date, dropdown, checkbox]
        field_value:
          description: Field value (type depends on field_type)
        field_config:
          type: object
          description: Additional field configuration

    CardFieldDefinition:
      type: object
      required:
        - id
        - studio_id
        - field_name
        - field_type
        - field_config
        - display_order
      properties:
        id:
          type: string
          format: uuid
        studio_id:
          type: string
          format: uuid
        field_name:
          type: string
          minLength: 1
          maxLength: 50
        field_type:
          type: string
          enum: [text, number, date, dropdown, checkbox]
        field_config:
          type: object
          description: Type-specific field configuration
        is_required:
          type: boolean
        display_order:
          type: integer
          minimum: 0
        created_at:
          type: string
          format: date-time
          readOnly: true

    CreateCardFieldDefinitionRequest:
      type: object
      required:
        - field_name
        - field_type
        - field_config
      properties:
        field_name:
          type: string
          minLength: 1
          maxLength: 50
        field_type:
          type: string
          enum: [text, number, date, dropdown, checkbox]
        field_config:
          type: object
        is_required:
          type: boolean
          default: false

    Error:
      type: object
      required:
        - error
        - message
      properties:
        error:
          type: string
          description: Error code
        message:
          type: string
          description: Human-readable error message
        details:
          type: object
          description: Additional error context

    PaginatedResponse:
      type: object
      required:
        - data
        - pagination
      properties:
        data:
          type: array
          items: {}
        pagination:
          type: object
          required:
            - page
            - per_page
            - total
            - total_pages
          properties:
            page:
              type: integer
              minimum: 1
            per_page:
              type: integer
              minimum: 1
              maximum: 100
            total:
              type: integer
              minimum: 0
            total_pages:
              type: integer
              minimum: 0

paths:
  # Company Management
  /companies:
    post:
      tags:
        - Companies
      summary: Create a new company
      operationId: createCompany
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CreateCompanyRequest"
      responses:
        "201":
          description: Company created successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Company"
        "400":
          description: Invalid input data
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "401":
          description: Unauthorized
        "409":
          description: Company name already exists
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"

    get:
      tags:
        - Companies
      summary: List user's companies
      operationId: listCompanies
      parameters:
        - name: page
          in: query
          schema:
            type: integer
            minimum: 1
            default: 1
        - name: per_page
          in: query
          schema:
            type: integer
            minimum: 1
            maximum: 100
            default: 20
      responses:
        "200":
          description: Companies retrieved successfully
          content:
            application/json:
              schema:
                allOf:
                  - $ref: "#/components/schemas/PaginatedResponse"
                  - type: object
                    properties:
                      data:
                        type: array
                        items:
                          $ref: "#/components/schemas/Company"
        "401":
          description: Unauthorized

  /companies/{companyId}:
    get:
      tags:
        - Companies
      summary: Get company details
      operationId: getCompany
      parameters:
        - name: companyId
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        "200":
          description: Company details retrieved
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Company"
        "401":
          description: Unauthorized
        "403":
          description: Access denied
        "404":
          description: Company not found

  # Studio Management
  /companies/{companyId}/studios:
    post:
      tags:
        - Studios
      summary: Create a new studio
      operationId: createStudio
      parameters:
        - name: companyId
          in: path
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CreateStudioRequest"
      responses:
        "201":
          description: Studio created successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Studio"
        "400":
          description: Invalid input data
        "401":
          description: Unauthorized
        "403":
          description: Access denied
        "404":
          description: Company not found

    get:
      tags:
        - Studios
      summary: List company studios
      operationId: listStudios
      parameters:
        - name: companyId
          in: path
          required: true
          schema:
            type: string
            format: uuid
        - name: business_area
          in: query
          schema:
            type: string
            enum:
              [
                marketing,
                sales,
                operations,
                customer_support,
                finance,
                hr,
                other,
              ]
        - name: page
          in: query
          schema:
            type: integer
            minimum: 1
            default: 1
        - name: per_page
          in: query
          schema:
            type: integer
            minimum: 1
            maximum: 100
            default: 20
      responses:
        "200":
          description: Studios retrieved successfully
          content:
            application/json:
              schema:
                allOf:
                  - $ref: "#/components/schemas/PaginatedResponse"
                  - type: object
                    properties:
                      data:
                        type: array
                        items:
                          $ref: "#/components/schemas/Studio"
        "401":
          description: Unauthorized
        "403":
          description: Access denied
        "404":
          description: Company not found

  # Workflow Templates
  /workflow-templates:
    get:
      tags:
        - Workflow Templates
      summary: Browse available workflow templates
      operationId: listWorkflowTemplates
      parameters:
        - name: business_area
          in: query
          schema:
            type: string
            enum:
              [
                marketing,
                sales,
                operations,
                customer_support,
                finance,
                hr,
                other,
              ]
        - name: complexity_level
          in: query
          schema:
            type: string
            enum: [beginner, intermediate, advanced]
        - name: tags
          in: query
          schema:
            type: array
            items:
              type: string
          style: form
          explode: false
        - name: search
          in: query
          schema:
            type: string
            maxLength: 100
          description: Search in name and description
        - name: page
          in: query
          schema:
            type: integer
            minimum: 1
            default: 1
        - name: per_page
          in: query
          schema:
            type: integer
            minimum: 1
            maximum: 50
            default: 20
      responses:
        "200":
          description: Workflow templates retrieved successfully
          content:
            application/json:
              schema:
                allOf:
                  - $ref: "#/components/schemas/PaginatedResponse"
                  - type: object
                    properties:
                      data:
                        type: array
                        items:
                          $ref: "#/components/schemas/WorkflowTemplate"
        "401":
          description: Unauthorized

  /workflow-templates/{templateId}:
    get:
      tags:
        - Workflow Templates
      summary: Get workflow template details
      operationId: getWorkflowTemplate
      parameters:
        - name: templateId
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        "200":
          description: Template details retrieved
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/WorkflowTemplate"
        "401":
          description: Unauthorized
        "404":
          description: Template not found

  # Workflow Execution
  /studios/{studioId}/executions:
    post:
      tags:
        - Workflow Execution
      summary: Execute a workflow
      operationId: executeWorkflow
      parameters:
        - name: studioId
          in: path
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ExecuteWorkflowRequest"
      responses:
        "201":
          description: Workflow execution started
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/WorkflowExecution"
        "400":
          description: Invalid input data
        "401":
          description: Unauthorized
        "403":
          description: Access denied or usage limit exceeded
        "404":
          description: Studio or template not found

    get:
      tags:
        - Workflow Execution
      summary: List workflow executions
      operationId: listWorkflowExecutions
      parameters:
        - name: studioId
          in: path
          required: true
          schema:
            type: string
            format: uuid
        - name: status
          in: query
          schema:
            type: string
            enum: [pending, running, succeeded, failed, paused]
        - name: template_id
          in: query
          schema:
            type: string
            format: uuid
        - name: start_date
          in: query
          schema:
            type: string
            format: date
        - name: end_date
          in: query
          schema:
            type: string
            format: date
        - name: page
          in: query
          schema:
            type: integer
            minimum: 1
            default: 1
        - name: per_page
          in: query
          schema:
            type: integer
            minimum: 1
            maximum: 100
            default: 20
      responses:
        "200":
          description: Executions retrieved successfully
          content:
            application/json:
              schema:
                allOf:
                  - $ref: "#/components/schemas/PaginatedResponse"
                  - type: object
                    properties:
                      data:
                        type: array
                        items:
                          $ref: "#/components/schemas/WorkflowExecution"
        "401":
          description: Unauthorized
        "403":
          description: Access denied
        "404":
          description: Studio not found

  /executions/{executionId}:
    get:
      tags:
        - Workflow Execution
      summary: Get workflow execution details
      operationId: getWorkflowExecution
      parameters:
        - name: executionId
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        "200":
          description: Execution details retrieved
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/WorkflowExecution"
        "401":
          description: Unauthorized
        "403":
          description: Access denied
        "404":
          description: Execution not found

    patch:
      tags:
        - Workflow Execution
      summary: Control workflow execution (pause/resume/cancel)
      operationId: controlWorkflowExecution
      parameters:
        - name: executionId
          in: path
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - action
              properties:
                action:
                  type: string
                  enum: [pause, resume, cancel, retry]
      responses:
        "200":
          description: Execution control applied
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/WorkflowExecution"
        "400":
          description: Invalid action for current status
        "401":
          description: Unauthorized
        "403":
          description: Access denied
        "404":
          description: Execution not found

  # File Management
  /studios/{studioId}/files:
    post:
      tags:
        - File Management
      summary: Upload a file to studio
      operationId: uploadFile
      parameters:
        - name: studioId
          in: path
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              required:
                - file
              properties:
                file:
                  type: string
                  format: binary
                access_level:
                  type: string
                  enum: [private, studio, company]
                  default: studio
                metadata:
                  type: object
      responses:
        "201":
          description: File uploaded successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/File"
        "400":
          description: Invalid file or exceeded size limit
        "401":
          description: Unauthorized
        "403":
          description: Access denied or storage quota exceeded
        "404":
          description: Studio not found
        "413":
          description: File too large

    get:
      tags:
        - File Management
      summary: List studio files
      operationId: listFiles
      parameters:
        - name: studioId
          in: path
          required: true
          schema:
            type: string
            format: uuid
        - name: mime_type
          in: query
          schema:
            type: string
        - name: access_level
          in: query
          schema:
            type: string
            enum: [private, studio, company]
        - name: page
          in: query
          schema:
            type: integer
            minimum: 1
            default: 1
        - name: per_page
          in: query
          schema:
            type: integer
            minimum: 1
            maximum: 100
            default: 20
      responses:
        "200":
          description: Files retrieved successfully
          content:
            application/json:
              schema:
                allOf:
                  - $ref: "#/components/schemas/PaginatedResponse"
                  - type: object
                    properties:
                      data:
                        type: array
                        items:
                          $ref: "#/components/schemas/File"
        "401":
          description: Unauthorized
        "403":
          description: Access denied
        "404":
          description: Studio not found

  /files/{fileId}:
    get:
      tags:
        - File Management
      summary: Get file details
      operationId: getFile
      parameters:
        - name: fileId
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        "200":
          description: File details retrieved
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/File"
        "401":
          description: Unauthorized
        "403":
          description: Access denied
        "404":
          description: File not found

    delete:
      tags:
        - File Management
      summary: Delete a file
      operationId: deleteFile
      parameters:
        - name: fileId
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        "204":
          description: File deleted successfully
        "401":
          description: Unauthorized
        "403":
          description: Access denied
        "404":
          description: File not found

  /files/{fileId}/download:
    get:
      tags:
        - File Management
      summary: Download file content
      operationId: downloadFile
      parameters:
        - name: fileId
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        "200":
          description: File content
          content:
            application/octet-stream:
              schema:
                type: string
                format: binary
        "401":
          description: Unauthorized
        "403":
          description: Access denied
        "404":
          description: File not found

  # Kanban Management
  /studios/{studioId}/kanban-boards:
    post:
      tags:
        - Kanban Management
      summary: Create a new Kanban board
      operationId: createKanbanBoard
      parameters:
        - name: studioId
          in: path
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CreateKanbanBoardRequest"
      responses:
        "201":
          description: Kanban board created successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/KanbanBoard"
        "400":
          description: Invalid input data
        "401":
          description: Unauthorized
        "403":
          description: Access denied
        "404":
          description: Studio not found

    get:
      tags:
        - Kanban Management
      summary: List Kanban boards in studio
      operationId: listKanbanBoards
      parameters:
        - name: studioId
          in: path
          required: true
          schema:
            type: string
            format: uuid
        - name: page
          in: query
          schema:
            type: integer
            minimum: 1
            default: 1
        - name: per_page
          in: query
          schema:
            type: integer
            minimum: 1
            maximum: 100
            default: 20
      responses:
        "200":
          description: Kanban boards retrieved successfully
          content:
            application/json:
              schema:
                allOf:
                  - $ref: "#/components/schemas/PaginatedResponse"
                  - type: object
                    properties:
                      data:
                        type: array
                        items:
                          $ref: "#/components/schemas/KanbanBoard"
        "401":
          description: Unauthorized
        "403":
          description: Access denied
        "404":
          description: Studio not found

  /kanban-boards/{boardId}:
    get:
      tags:
        - Kanban Management
      summary: Get Kanban board details
      operationId: getKanbanBoard
      parameters:
        - name: boardId
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        "200":
          description: Kanban board details retrieved
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/KanbanBoard"
        "401":
          description: Unauthorized
        "403":
          description: Access denied
        "404":
          description: Board not found

    patch:
      tags:
        - Kanban Management
      summary: Update Kanban board
      operationId: updateKanbanBoard
      parameters:
        - name: boardId
          in: path
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CreateKanbanBoardRequest"
      responses:
        "200":
          description: Kanban board updated successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/KanbanBoard"
        "400":
          description: Invalid input data
        "401":
          description: Unauthorized
        "403":
          description: Access denied
        "404":
          description: Board not found

    delete:
      tags:
        - Kanban Management
      summary: Delete Kanban board
      operationId: deleteKanbanBoard
      parameters:
        - name: boardId
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        "204":
          description: Kanban board deleted successfully
        "401":
          description: Unauthorized
        "403":
          description: Access denied
        "404":
          description: Board not found

  /kanban-boards/{boardId}/stages:
    post:
      tags:
        - Kanban Management
      summary: Create a new stage in Kanban board
      operationId: createKanbanStage
      parameters:
        - name: boardId
          in: path
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CreateKanbanStageRequest"
      responses:
        "201":
          description: Kanban stage created successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/KanbanStage"
        "400":
          description: Invalid input data
        "401":
          description: Unauthorized
        "403":
          description: Access denied
        "404":
          description: Board not found

    get:
      tags:
        - Kanban Management
      summary: List stages in Kanban board
      operationId: listKanbanStages
      parameters:
        - name: boardId
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        "200":
          description: Kanban stages retrieved successfully
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/KanbanStage"
        "401":
          description: Unauthorized
        "403":
          description: Access denied
        "404":
          description: Board not found

  /kanban-stages/{stageId}:
    patch:
      tags:
        - Kanban Management
      summary: Update Kanban stage
      operationId: updateKanbanStage
      parameters:
        - name: stageId
          in: path
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CreateKanbanStageRequest"
      responses:
        "200":
          description: Kanban stage updated successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/KanbanStage"
        "400":
          description: Invalid input data
        "401":
          description: Unauthorized
        "403":
          description: Access denied
        "404":
          description: Stage not found

    delete:
      tags:
        - Kanban Management
      summary: Delete Kanban stage
      operationId: deleteKanbanStage
      parameters:
        - name: stageId
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        "204":
          description: Kanban stage deleted successfully
        "401":
          description: Unauthorized
        "403":
          description: Access denied
        "404":
          description: Stage not found

  /kanban-boards/{boardId}/cards:
    post:
      tags:
        - Kanban Management
      summary: Create a new card in Kanban board
      operationId: createKanbanCard
      parameters:
        - name: boardId
          in: path
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CreateKanbanCardRequest"
      responses:
        "201":
          description: Kanban card created successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/KanbanCard"
        "400":
          description: Invalid input data
        "401":
          description: Unauthorized
        "403":
          description: Access denied
        "404":
          description: Board not found

    get:
      tags:
        - Kanban Management
      summary: List cards in Kanban board
      operationId: listKanbanCards
      parameters:
        - name: boardId
          in: path
          required: true
          schema:
            type: string
            format: uuid
        - name: stage_id
          in: query
          schema:
            type: string
            format: uuid
          description: Filter by stage
        - name: assignee_id
          in: query
          schema:
            type: string
            format: uuid
          description: Filter by assignee
        - name: page
          in: query
          schema:
            type: integer
            minimum: 1
            default: 1
        - name: per_page
          in: query
          schema:
            type: integer
            minimum: 1
            maximum: 100
            default: 50
      responses:
        "200":
          description: Kanban cards retrieved successfully
          content:
            application/json:
              schema:
                allOf:
                  - $ref: "#/components/schemas/PaginatedResponse"
                  - type: object
                    properties:
                      data:
                        type: array
                        items:
                          $ref: "#/components/schemas/KanbanCard"
        "401":
          description: Unauthorized
        "403":
          description: Access denied
        "404":
          description: Board not found

  /kanban-cards/{cardId}:
    get:
      tags:
        - Kanban Management
      summary: Get Kanban card details
      operationId: getKanbanCard
      parameters:
        - name: cardId
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        "200":
          description: Kanban card details retrieved
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/KanbanCard"
        "401":
          description: Unauthorized
        "403":
          description: Access denied
        "404":
          description: Card not found

    patch:
      tags:
        - Kanban Management
      summary: Update Kanban card
      operationId: updateKanbanCard
      parameters:
        - name: cardId
          in: path
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UpdateKanbanCardRequest"
      responses:
        "200":
          description: Kanban card updated successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/KanbanCard"
        "400":
          description: Invalid input data
        "401":
          description: Unauthorized
        "403":
          description: Access denied
        "404":
          description: Card not found

    delete:
      tags:
        - Kanban Management
      summary: Delete Kanban card
      operationId: deleteKanbanCard
      parameters:
        - name: cardId
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        "204":
          description: Kanban card deleted successfully
        "401":
          description: Unauthorized
        "403":
          description: Access denied
        "404":
          description: Card not found

  /kanban-cards/{cardId}/move:
    post:
      tags:
        - Kanban Management
      summary: Move card to different stage
      operationId: moveKanbanCard
      parameters:
        - name: cardId
          in: path
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - stage_id
                - position
              properties:
                stage_id:
                  type: string
                  format: uuid
                position:
                  type: integer
                  minimum: 0
      responses:
        "200":
          description: Card moved successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/KanbanCard"
        "400":
          description: Invalid move parameters
        "401":
          description: Unauthorized
        "403":
          description: Access denied
        "404":
          description: Card or stage not found

  /studios/{studioId}/card-field-definitions:
    post:
      tags:
        - Kanban Management
      summary: Create custom field definition for cards
      operationId: createCardFieldDefinition
      parameters:
        - name: studioId
          in: path
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CreateCardFieldDefinitionRequest"
      responses:
        "201":
          description: Field definition created successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CardFieldDefinition"
        "400":
          description: Invalid input data
        "401":
          description: Unauthorized
        "403":
          description: Access denied
        "404":
          description: Studio not found

    get:
      tags:
        - Kanban Management
      summary: List custom field definitions for cards
      operationId: listCardFieldDefinitions
      parameters:
        - name: studioId
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        "200":
          description: Field definitions retrieved successfully
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/CardFieldDefinition"
        "401":
          description: Unauthorized
        "403":
          description: Access denied
        "404":
          description: Studio not found

  /card-field-definitions/{fieldId}:
    patch:
      tags:
        - Kanban Management
      summary: Update custom field definition
      operationId: updateCardFieldDefinition
      parameters:
        - name: fieldId
          in: path
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CreateCardFieldDefinitionRequest"
      responses:
        "200":
          description: Field definition updated successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CardFieldDefinition"
        "400":
          description: Invalid input data
        "401":
          description: Unauthorized
        "403":
          description: Access denied
        "404":
          description: Field definition not found

    delete:
      tags:
        - Kanban Management
      summary: Delete custom field definition
      operationId: deleteCardFieldDefinition
      parameters:
        - name: fieldId
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        "204":
          description: Field definition deleted successfully
        "401":
          description: Unauthorized
        "403":
          description: Access denied
        "404":
          description: Field definition not found

  # Health & Status
  /health:
    get:
      tags:
        - System
      summary: Service health check
      operationId: healthCheck
      security: []
      responses:
        "200":
          description: Service is healthy
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    enum: [healthy]
                  timestamp:
                    type: string
                    format: date-time
                  version:
                    type: string
                  checks:
                    type: object
                    properties:
                      database:
                        type: string
                        enum: [healthy, unhealthy]
                      activepieces_api:
                        type: string
                        enum: [healthy, unhealthy]
        "503":
          description: Service is unhealthy

tags:
  - name: Companies
    description: Company registration and management
  - name: Studios
    description: Studio creation and management within companies
  - name: Workflow Templates
    description: Browse and discover pre-built automation workflows
  - name: Workflow Execution
    description: Execute workflows and monitor progress
  - name: File Management
    description: Upload, organize, and manage files within studios
  - name: Kanban Management
    description: Create and manage Kanban boards, stages, and cards with workflow triggers
  - name: System
    description: System health and status endpoints
